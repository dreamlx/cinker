<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"	
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:task="http://www.springframework.org/schema/task"  
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
            http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
             http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd"
	default-lazy-init="false">

	<description>Spring MVC Configuration</description>
	
	<task:annotation-driven /> <!-- 定时器开关-->  
	
	<!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="/WEB-INF/conf/jdbc.properties" />
		
	<!-- 数据源配置, 使用 druid数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${db.driver}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		
		<property name="initialSize" value="${pool.minIdle}" />
		<property name="minIdle" value="${pool.minIdle}" />
		<property name="maxActive" value="${pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- mysql的检查配置 	用来检测连接是否有效的sql，要求是一个查询语句。 -->
		<property name="validationQuery" value="SELECT 'x'" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="false" />
		
		<!-- <property name="poolPreparedStatements" value="false"></property>
		<property name="maxOpenPreparedStatements" value="100"></property> -->		
	</bean>	
	
	
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />
    </bean>
    
	<tx:annotation-driven transaction-manager="txManager" />
		
	<context:component-scan base-package="com.cinker.*" />
	

	<!-- jdbcTemplate模板操作类注入 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- jdbcTemplate模板操作类注入 -->
	<bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg><ref bean="dataSource"/></constructor-arg>
	</bean>

	<!-- spring基于切面的 声明式事务管理配置  star -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="Throwable" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="Throwable" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="Throwable" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="Throwable" />
			<tx:method name="batch*" propagation="REQUIRED" read-only="false" rollback-for="Throwable" />
			<tx:method name="*" propagation="REQUIRED" read-only="false" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.cinker.service..*.*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>  
	<!--  spring基于切面的 声明式事务管理配置  end -->
	
    <!-- memcached配置 -->  
    <bean id="memcachedPool" class="com.danga.MemCached.SockIOPool" factory-method="getInstance" init-method="initialize" lazy-init="false" destroy-method="shutDown">
		<constructor-arg>
		<value>memcachedPool</value>
		</constructor-arg>
		<!-- 可以设置多个memcached服务器 -->
		<property name="servers">
		<list>
		<value>127.0.0.1:11211</value>
		</list>
		</property>
		<!-- 每个服务器初始连接数 -->
		<property name="initConn">
		<value>20</value>
		</property>
		<!-- 每个服务器最小连接数 -->
		<property name="minConn">
		<value>20</value>
		</property>
		<!-- 每个服务器最大连接数 -->
		<property name="maxConn">
		<value>1000</value>
		</property>
		<!-- 主线程睡眠时间 -->
		<property name="maintSleep">
		<value>30000</value>
		</property>
		<!-- TCP/Socket的参数，如果是true在写数据时不缓冲，立即发送出去参数 -->
		<property name="nagle">
		<value>false</value>
		</property>
		<!-- 连接超时/阻塞读取数据的超时间是 -->
		<property name="socketTO">
		<value>3000</value>
		</property>
		</bean>
		
		<bean id="memcachedClient" class="com.danga.MemCached.MemCachedClient" >
		<constructor-arg>
		<value>memcachedPool</value>
		</constructor-arg>
		</bean>	
</beans>
